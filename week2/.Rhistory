distrust_graph = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
distrust_graph = set.vertex.attribute(distrust_graph, "dev", index = V(distrust_graph), dev)
col = rep(0,30)
for ( i in c(1:30))
{
col[i] = pal[dev[i] + 1]
}
plot.igraph(distrust_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.color = col, vertex.label.color="black",edge.width=E(distrust_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
count = rep(0,38)
advice_edge1 = cbind(data[,1], data$V38)
for(i in c(1:30))
{
count[data$V38[i]] =  count[data$V38[i]] + 1
}
advice_edge2 = cbind(data[,1], data$V39)
for(i in c(1:30))
{
count[data$V39[i]] =  count[data$V39[i]] + 1
}
advice_edge3 = cbind(data[,1], data$V40)
for(i in c(1:30))
{
count[data$V40[i]] =  count[data$V40[i]] + 1
}
advice_edge4 = cbind(data[,1], data$V41)
for(i in c(1:30))
{
count[data$V41[i]] =  count[data$V41[i]] + 1
}
advice_edge5 = cbind(data[,1], data$V42)
for(i in c(1:30))
{
count[data$V42[i]] =  count[data$V42[i]] + 1
}
print(count)
advice_edges = rbind(advice_edge1, advice_edge2, advice_edge3, advice_edge4, advice_edge5)
advice_seeking = graph.data.frame(advice_edges, directed = TRUE)
for ( i in c(1:35))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
plot.igraph(advice_seeking,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.color="black",vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
V(advice_seeking)$color[V(advice_seeking$name[i] == which.max(count))]
V(advice_seeking)$color[V(advice_seeking)$name[i] == which.max(count)]
V(advice_seeking)$color
V(advice_seeking)$color[V(advice_seeking)$name[i] == which.max(count)] = 'red'
V(advice_seeking)$color
V(advice_seeking)$color[V(advice_seeking)$name[i] == which.max(count)] = 'black'
V(advice_seeking)$color
V(advice_seeking)$name[i] == which.max(count)
V(advice_seeking)$color[V(advice_seeking)$name== which.max(count)] = 'black'
V(advice_seeking)$color
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5)
# load data:
# install.packages("NetData")
data(studentnets.S641, package = "NetData")
# check objects
ls()
# check data structure
s641_full_data_frame[1:20,]
dim(s641_full_data_frame)
# reduce to non-zero edges and build a graph object
s641_full_nonzero_edges = subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
s641_full_nonzero_edges[1:20,]
dim(s641_full_nonzero_edges)
s641_full = graph.data.frame(s641_full_nonzero_edges)
summary(s641_full)
# create separate graphs for each relationship type based on edge attributes and remove isolates
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
summary(s641_social)
s641_task = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task = delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
summary(s641_task)
# plot each network
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5)
E(s641_social)
attributes(E(s641_social))
E(s641_social)$vnames
E(s641_social)[1]
# trust
count_trust = 0
total_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if (adj[i,j]>0)
total_trust = total_trust + 1
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
total_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if (adj[i,j]<0)
total_distrust = total_distrust + 1
if ((adj[i,j]<0)&(adj[j,i]<0))
count_distrust = count_distrust + 1
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
total_advice = 0
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
{
if (advice_adj[i,j]==1){
total_advice = total_advice + 1}
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
count_advice = count_advice + 1
}
}
print('How many of the trust relationships are reciprocated?')
print(count_trust / 2)
print('How many of the distrust relationships are reciprocated?')
print(count_distrust / 2)
print('How many of the seeking advice relationships are reciprocated?')
print(count_advice / 2)
prob_trust = total_trust/900
prob_distrust = total_distrust/900
prob_advice = total_advice/900
print('If by random chance: ')
s641_full = graph.data.frame(s641_full_nonzero_edges)
s641_full = graph.data.frame(s641_full_nonzero_edges, weighted = TRUE)
s641_social
get.edges(s641_social)
get.edges(s641_social,E(s641_social))
rm(list = ls(all = TRUE))
library(igraph)
library(data.table)
setwd("C:/Users/cyma9/Dropbox/SocialNetwork/week1")
data = fread(file="sample_generated_network_new.csv", header = TRUE, stringsAsFactors=FALSE)
column_wise_replace = function(DT, x, y) {
for(i in seq_along(x)){
for (j in seq_len(ncol(DT))){
set(DT,which(DT[[j]] == x[i]),j,y[i])
}
}
}
data = data[sample(nrow(data), replace = FALSE),]
advice = data[,(ncol(data) - 4):ncol(data)]
namekey = data[,1]
data = data[,2:(ncol(data) - 5)]
setcolorder(data, sample(colnames(data), replace = FALSE))
data = cbind(namekey, data, advice)
# make the choice data numeric
scale = cbind(c("Extremely Distrust  1","Distrust  2","Slightly Distrust  3","Neither Distrust Nor Trust  4", "Slightly Trust  5","Trust  6", "Extremely Trust  7", "I don't know this person.", "This is my own name."), c(-3, -2, -1, 0, 1, 2, 3, 0, 0))
column_wise_replace(data, scale[,1], scale[,2])
# make adjacency matrix
# subset to just the trust choices, then sort on the columns and rows to make each entry match up
# data are directed, so matrix will not be symmetric
adj = as.data.frame(data[,1:(ncol(data) - 5)])
rownames(adj) = adj[,1]
adj = adj[,-1]
adj = adj[sort(rownames(adj)),sort(colnames(adj))]
trusting = adj
trusting[trusting==-3] = 0
trusting[trusting==-2] = 0
trusting[trusting==-1] = 0
trusting_graph = graph.adjacency(as.matrix(trusting), "directed", weighted = TRUE)
plot.igraph(trusting_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(trusting_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
rm(list = ls(all = TRUE))
library(igraph)
library(data.table)
setwd("C:/Users/cyma9/Dropbox/SocialNetwork/week2")
data(studentnets.S641, package = "NetData")
s641_full_nonzero_edges = subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
s641_full = graph.data.frame(s641_full_nonzero_edges)
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
s641_task = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task = delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
getNetStats=function(net)
{
close_in = closeness(net, mode = "in")
close_out = closeness(net, mode = "out")
close_all = closeness(net, mode = 'all')
betw = betweenness(net)
evc = evcent(as.undirected(net, mode = "collapse"))
id=V(net)$name
stats=as.data.table(list(id = id, close_in = close_in, close_out = close_out, close_all = close_all, betw = betw, evc = evc$vector))
return(stats)
}
netstats_task = getNetStats(s641_task)
netstats_social = getNetStats(s641_social)
cor(netstats_task[-c(11,12),2],netstats_social[-c(11),2])
cor(netstats_task[-c(11,12),3],netstats_social[-c(11),3])
cor(netstats_task[-c(11,12),4],netstats_social[-c(11),4])
cor(netstats_task[-c(11,12),5],netstats_social[-c(11),5])
cor(netstats_task[-c(11,12),6],netstats_social[-c(11),6])
mean_social = mean(s641_full_nonzero_edges$social_tie)
mean_task = mean(s641_full_nonzero_edges$task_tie)
E(s641_social)
s641_full
s641_full_data_frame
get.edges(s641_social,E(s641_social))
get.edges(s641_social,E(s641_social))[1]
get.edges(s641_social,E(s641_social))[1,2]
col
for ( i in c(1:30))
{
col[i] = pal[dev[i] + 1]
}
distrust = adj
rm(list = ls(all = TRUE))
library(igraph)
library(data.table)
setwd("C:/Users/cyma9/Dropbox/SocialNetwork/week1")
data = fread(file="sample_generated_network_new.csv", header = TRUE, stringsAsFactors=FALSE)
column_wise_replace = function(DT, x, y) {
for(i in seq_along(x)){
for (j in seq_len(ncol(DT))){
set(DT,which(DT[[j]] == x[i]),j,y[i])
}
}
}
data = data[sample(nrow(data), replace = FALSE),]
advice = data[,(ncol(data) - 4):ncol(data)]
namekey = data[,1]
data = data[,2:(ncol(data) - 5)]
setcolorder(data, sample(colnames(data), replace = FALSE))
data = cbind(namekey, data, advice)
# make the choice data numeric
scale = cbind(c("Extremely Distrust  1","Distrust  2","Slightly Distrust  3","Neither Distrust Nor Trust  4", "Slightly Trust  5","Trust  6", "Extremely Trust  7", "I don't know this person.", "This is my own name."), c(-3, -2, -1, 0, 1, 2, 3, 0, 0))
column_wise_replace(data, scale[,1], scale[,2])
# make adjacency matrix
# subset to just the trust choices, then sort on the columns and rows to make each entry match up
# data are directed, so matrix will not be symmetric
adj = as.data.frame(data[,1:(ncol(data) - 5)])
rownames(adj) = adj[,1]
adj = adj[,-1]
adj = adj[sort(rownames(adj)),sort(colnames(adj))]
trusting = adj
trusting[trusting==-3] = 0
trusting[trusting==-2] = 0
trusting[trusting==-1] = 0
trusting_graph = graph.adjacency(as.matrix(trusting), "directed", weighted = TRUE)
plot.igraph(trusting_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(trusting_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
distrust = adj
distrust[distrust == 3] = 0
distrust[distrust == 2] = 0
distrust[distrust == 1] = 0
distrust[distrust == -3] = 3
distrust[distrust == -2] = 2
distrust[distrust == -1] = 1
distrust_num = apply(distrust,2,as.numeric)
dev = colSums(distrust_num)
pal <- rainbow(max(dev) - min(dev) + 1 , alpha=.5)
distrust_graph = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
distrust_graph = set.vertex.attribute(distrust_graph, "dev", index = V(distrust_graph), dev)
col = rep(0,30)
for ( i in c(1:30))
{
col[i] = pal[dev[i] + 1]
}
plot.igraph(distrust_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.color = col, vertex.label.color="black",edge.width=E(distrust_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
distrust = adj
distrust[distrust == 3] = 0
distrust[distrust == 2] = 0
distrust[distrust == 1] = 0
distrust[distrust == -3] = 3
distrust[distrust == -2] = 2
distrust[distrust == -1] = 1
distrust_num = apply(distrust,2,as.numeric)
dev = colSums(distrust_num)
pal <- rainbow(max(dev) - min(dev) + 1 , alpha=.5)
distrust_graph = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
# distrust_graph = set.vertex.attribute(distrust_graph, "dev", index = V(distrust_graph), dev)
col = rep(0,30)
for ( i in c(1:30))
{
col[i] = pal[dev[i] + 1]
}
plot.igraph(distrust_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.color = col, vertex.label.color="black",edge.width=E(distrust_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
distrust = adj
distrust[distrust == 3] = 0
distrust[distrust == 2] = 0
distrust[distrust == 1] = 0
distrust[distrust == -3] = 3
distrust[distrust == -2] = 2
distrust[distrust == -1] = 1
distrust_num = apply(distrust,2,as.numeric)
dev = colSums(distrust_num)
pal <- rainbow(max(dev) - min(dev) + 1 , alpha=.5)
distrust_graph = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
col = rep(0,30)
for ( i in c(1:30))
{
col[i] = pal[dev[i] + 1]
}
plot.igraph(distrust_graph,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.color = col, vertex.label.color="black",edge.width=E(distrust_graph)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
rm(list = ls(all = TRUE))
library(igraph)
library(data.table)
setwd("C:/Users/cyma9/Dropbox/SocialNetwork/week2")
data(studentnets.S641, package = "NetData")
s641_full_nonzero_edges = subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
s641_full = graph.data.frame(s641_full_nonzero_edges)
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
s641_task = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task = delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
getNetStats=function(net)
{
close_in = closeness(net, mode = "in")
close_out = closeness(net, mode = "out")
close_all = closeness(net, mode = 'all')
betw = betweenness(net)
evc = evcent(as.undirected(net, mode = "collapse"))
id=V(net)$name
stats=as.data.table(list(id = id, close_in = close_in, close_out = close_out, close_all = close_all, betw = betw, evc = evc$vector))
return(stats)
}
netstats_task = getNetStats(s641_task)
netstats_social = getNetStats(s641_social)
cor(netstats_task[-c(11,12),2],netstats_social[-c(11),2])
cor(netstats_task[-c(11,12),3],netstats_social[-c(11),3])
cor(netstats_task[-c(11,12),4],netstats_social[-c(11),4])
cor(netstats_task[-c(11,12),5],netstats_social[-c(11),5])
cor(netstats_task[-c(11,12),6],netstats_social[-c(11),6])
mean_social = mean(s641_full_nonzero_edges$social_tie)
mean_task = mean(s641_full_nonzero_edges$task_tie)
s641_full_data_frame
s641_full_data_frame$social_tie[get.edges(s641_social,E(s641_social))[1,1],get.edges(s641_social,E(s641_social))[1,2]]
(s641_social,E(s641_social))[1,1]
E(s641_social))[1,1]
E(s641_social)[1,1]
get.edges(s641_social,E(s641_social))[1,1]
get.edges(s641_social,E(s641_social))[1,2]
s641_full_data_frame$social_tie[1,4]
s641_full_data_frame$social_tie
s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[1,1]-1)*22+get.edges(s641_social,E(s641_social))[1,2]]
apply(E(s641_social)$weight),s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[1,1]-1)*22+get.edges(s641_social,E(s641_social))[1,2]])
len(s641_social)
length(s641_social)
s641_social
dim(s641_social)
dim(as.list(s641_social））
dim(as.list(s641_social))
s641_full_nonzero_edges
length(s641_full_nonzero_edges)
nrow(s641_full_nonzero_edges)
for (i in c(1,57))
{
E(s641_social)$weight)$weight = s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[i,1]-1)*22+get.edges(s641_social,E(s641_social))[i,2]]
for (i in c(1,57))
{
E(s641_social)$weight = s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[i,1]-1)*22+get.edges(s641_social,E(s641_social))[i,2]]
}
E(s641_social)$weight
for (i in c(1,57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[i,1]-1)*22+get.edges(s641_social,E(s641_social))[i,2]]
}
E(s641_social)$weight
s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[1,1]-1)*22+get.edges(s641_social,E(s641_social))[1,2]]
s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[2,1]-1)*22+get.edges(s641_social,E(s641_social))[2,2]]
s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[3,1]-1)*22+get.edges(s641_social,E(s641_social))[3,2]]
s641_full_data_frame$social_tie
get.edges(s641_social,E(s641_social))
get.edges(s641_social,E(s641_social))[i,1]
for (i in c(1:57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(get.edges(s641_social,E(s641_social))[i,1]-1)*22+get.edges(s641_social,E(s641_social))[i,2]]
}
E(s641_social)$weight
rm(list = ls(all = TRUE))
library(igraph)
library(data.table)
setwd("C:/Users/cyma9/Dropbox/SocialNetwork/week2")
data(studentnets.S641, package = "NetData")
s641_full_nonzero_edges = subset(s641_full_data_frame, (social_tie > 0 | task_tie > 0))
s641_full = graph.data.frame(s641_full_nonzero_edges)
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
s641_task = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task = delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
getNetStats=function(net)
{
close_in = closeness(net, mode = "in")
close_out = closeness(net, mode = "out")
close_all = closeness(net, mode = 'all')
betw = betweenness(net)
evc = evcent(as.undirected(net, mode = "collapse"))
id=V(net)$name
stats=as.data.table(list(id = id, close_in = close_in, close_out = close_out, close_all = close_all, betw = betw, evc = evc$vector))
return(stats)
}
netstats_task = getNetStats(s641_task)
netstats_social = getNetStats(s641_social)
cor(netstats_task[-c(11,12),2],netstats_social[-c(11),2])
cor(netstats_task[-c(11,12),3],netstats_social[-c(11),3])
cor(netstats_task[-c(11,12),4],netstats_social[-c(11),4])
cor(netstats_task[-c(11,12),5],netstats_social[-c(11),5])
cor(netstats_task[-c(11,12),6],netstats_social[-c(11),6])
s641_full_nonzero_edges
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
s641_social
get.edges(s641_social,E(s641_social))
get.edges(s641_social,E(s641_social)[2])
get.edges(s641_social,E(s641_social)[3])
get.edgelist(s641_social)
get.edgelist(s641_social)[1]
get.edgelist(s641_social)[1,1]
get.edgelist(s641_social)[1,2]
typeof(get.edgelist(s641_social)[1,2])
get.edge(s641_social)[1,2]
get.ends(s641_social)
ends(s641_social)
ends(s641_social,E(s641_social))
for (i in c(1:57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[i,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[i,2])]
}
E(s641_social)$weight
E(s641_task)
for (i in c(1:57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[i,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[i,2])]
}
for (i in c(1:48))
{
E(s641_task)$weight[i] = s641_full_data_frame$task_tie[(as.numeric(ends(s641_task,E(s641_task))[i,1])-1)*22+as.numeric(ends(s641_task,E(s641_task))[i,2])]
}
E(s641_task)$weight
mean_social = mean(s641_full_nonzero_edges$social_tie)
mean_task = mean(s641_full_nonzero_edges$task_tie)
get.edges(s641_social,E(s641_social))
mean_social
mean_task
E(s641_socail)$color = ifelse(E(s641_social)$weight < mean_social, 'red','green')
E(s641_social)$color = ifelse(E(s641_social)$weight < mean_social, 'red','green')
E(s641_social)$color
E(s641_social)$weight = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[,2])]
trust_with_advice_graph = graph.adjacency(as.matrix(trust_with_advice), "directed", weighted = TRUE)
E(s641_social)$weight
E(s641_social)$weight = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[,2])]
E(s641_task)$weight = s641_full_data_frame$task_tie[(as.numeric(ends(s641_task,E(s641_task))[,1])-1)*22+as.numeric(ends(s641_task,E(s641_task))[,2])]
for (i in c(1:57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[i,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[i,2])]
}
for (i in c(1:48))
{
E(s641_task)$weight[i] = s641_full_data_frame$task_tie[(as.numeric(ends(s641_task,E(s641_task))[i,1])-1)*22+as.numeric(ends(s641_task,E(s641_task))[i,2])]
}
s641_social = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "social_tie")==0])
s641_social = delete.vertices(s641_social, V(s641_social)[degree(s641_social)==0])
s641_task = delete.edges(s641_full, E(s641_full)[get.edge.attribute(s641_full,name = "task_tie")==0])
s641_task = delete.vertices(s641_task, V(s641_task)[degree(s641_task)==0])
E(s641_social)$weight = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[,2])]
E(s641_social)$weight
for (i in c(1:57))
{
E(s641_social)$weight[i] = s641_full_data_frame$social_tie[(as.numeric(ends(s641_social,E(s641_social))[i,1])-1)*22+as.numeric(ends(s641_social,E(s641_social))[i,2])]
}
for (i in c(1:48))
{
E(s641_task)$weight[i] = s641_full_data_frame$task_tie[(as.numeric(ends(s641_task,E(s641_task))[i,1])-1)*22+as.numeric(ends(s641_task,E(s641_task))[i,2])]
}
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color)
E(s641_social)$color
E(s641_social)$color = ifelse(E(s641_social)$weight < mean_social, 'red','green')
E(s641_task)$color = ifelse(E(s641_task)$weight < mean_social, 'red','green')
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,curve = TRUE)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,curved = TRUE)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,curved = FALSE)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,curved = TRUE)
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,edge.curved = TRUE)
plot.igraph(s641_task, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$task,edge.curved = TRUE)
median(s641_full_nonzero_edges$social_tie)
median_social = median(s641_full_nonzero_edges$social_tie)
median_task = median(s641_full_nonzero_edges$task_tie)
E(s641_social)$color = ifelse(E(s641_social)$weight < median_social, 'red','green')
E(s641_task)$color = ifelse(E(s641_task)$weight < median_social, 'red','green')
plot.igraph(s641_social, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$color,edge.curved = TRUE)
plot.igraph(s641_task, layout=layout.fruchterman.reingold, edge.arrow.size=.5,edge.color = E(s641_social)$task,edge.curved = TRUE)
vertex_connectivity(s641_social,1,30)
vertex_connectivity(s641_social,1,2)
vertex_connectivity(s641_social,1,3)
View(s641_social)
s641_social
vertex_connectivity(s641_social,1,6)
vertex_connectivity(s641_social,1,69)
vertex_connectivity(s641_social,1,9)
vertex_connectivity(s641_social,1,14)
Viwe(s641_full_data_frame)
View(s641_full_data_frame)
vertex_connectivity(s641_social,1,8)
vertex_connectivity(s641_social,8,1)
