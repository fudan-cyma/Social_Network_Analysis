for(i in c(1:30))
{
count[data$V41[i]] =  count[data$V41[i]] + 1
}
advice_edge5 = cbind(data[,1], data$V42)
for(i in c(1:30))
{
count[data$V42[i]] =  count[data$V42[i]] + 1
}
print(count)
advice_edges = rbind(advice_edge1, advice_edge2, advice_edge3, advice_edge4, advice_edge5)
advice_seeking = graph.data.frame(advice_edges, directed = TRUE)
for ( i in c(1:38))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
# node = as.array(V(advice_seeking))
# V(advice_seeking)$color[node[] == which.max(count)] = 'red'
# make the plot
plot.igraph(advice_seeking,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.color="black",vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
V(advice_seeking)$name[i] == which.max(count)
V(advice_seeking)$name[i] == which.max(count)
V(advice_seeking)$name[2] == which.max(count)
for ( i in c(1:38))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_trust = count_trust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_trust = count_trust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_trust = count_trust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
print('How many of the relationships are reciprocated in each of the three networks?',count_trust)
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_trust = count_trust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
print('How many of the relationships are reciprocated in each of the three networks?')
print(count_distrust)
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_trust = count_trust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
print('How many of the relationships are reciprocated in each of the three networks?')
print(count_trust)
# trust
count_trust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]>0)&(adj[j,i]>0)){
count_trust = count_trust + 1
}
}
}
count_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
if ((adj[i,j]<0)&(adj[j,i]<0)){
count_distrust = count_distrust + 1
}
}
}
advice_adj = matrix(0,nrow = 37, ncol = 37)
for ( i in c(1:nrow(advice_edges)))
{
x = advice_edges[i]$`To begin, please select your name.`
y = advice_edges[i]$V2
advice_adj[x,y] = 1
}
count_advice = 0
for ( i in c(1:37))
{
for ( j in c(1:37))
if ((advice_adj[i,j]==1)&(advice_adj[j,i]==1))
{
count_advice = count_advice + 1
}
}
print('How many of the trust relationships are reciprocated in each of the three networks?')
print(count_trust)
print('How many of the distrust relationships are reciprocated in each of the three networks?')
print(count_distrust)
print('How many of the seeking advice relationships are reciprocated in each of the three networks?')
print(count_advice)
count_advice_trust = 0
count_advice_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
x = as.numeric(colnames(adj)[i])
y = as.numeric(rownames(adj)[j])
if ((adj[i,j]>0) & (advice_adj[x,y]>0))
{
count_advice_trust = count_advice_trust + 1
}
if ((adj[i,j]<0) & (advice_adj[x,y]>0))
{
count_advice_trust = count_advice_trust + 1
}
}
}
count_advice_trust = 0
count_advice_distrust = 0
for (i in c(1:30))
{
for (j in c(1:30))
{
x = as.numeric(colnames(adj)[i])
y = as.numeric(rownames(adj)[j])
if ((adj[i,j]>0) & (advice_adj[x,y]>0))
{
count_advice_trust = count_advice_trust + 1
}
if ((adj[i,j]<0) & (advice_adj[x,y]>0))
{
count_advice_distrust = count_advice_distrust + 1
}
}
}
print('How many of the relationships in the trust network also exist in the advice network?')
print(count_advice_trust)
print('How many of the relationships in the distrust network also exist in the advice network?')
print(count_advice_distrust)
trusting = adj
trusting[trusting==-3] = 0
trusting[trusting==-2] = 0
trusting[trusting==-1] = 0
trusting_extra = graph.adjacency(as.matrix(trusting), "directed", weighted = TRUE)
E(trusting_extra)$color = 'green'
# plot.igraph(trusting_extra,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(trusting_extra)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
distrust = adj
distrust[distrust == 3] = 0
distrust[distrust == 2] = 0
distrust[distrust == 1] = 0
distrust[distrust == -3] = 3
distrust[distrust == -2] = 2
distrust[distrust == -1] = 1
distrust_graph_extra = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
E(distrust_graph_extra)$color  = 'red'
# plot.igraph(distrust_graph_extra,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(distrust_graph_extra)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=TRUE)
extra_graph = union(distrust_graph_extra, trusting_extra)
E(extra_graph)$color <- ifelse(is.na(E(extra_graph)$color_1),E(extra_graph)$color_2,E(extra_graph)$color_1)
E(extra_graph)$weight <- ifelse(is.na(E(extra_graph)$weight_1),E(extra_graph)$weight_1,E(extra_graph)$weight_2)
advice_adj_extra = adj
for (i in c(1:30))
{
for (j in c(1:30))
{
x = as.numeric(colnames(adj)[i])
y = as.numeric(rownames(adj)[j])
if (advice_adj[x,y] == 1)
{
advice_adj_extra[i,j] = 1
}
else
{
advice_adj_extra[i,j] = 0
}
}
}
advice_graph_extra = graph.adjacency(as.matrix(advice_adj_extra), "directed", weighted = TRUE)
E(advice_graph_extra)$color  = 'black'
advice_edge = as_edgelist(advice_graph_extra, names = T)
trust_edge = as_edgelist(extra_graph, names = T)
new_edge = rbind(trust_edge, advice_edge)
graph_new = graph_from_edgelist(new_edge)
for (i in c(1:424))
{
E(graph_new)$color[i] = E(extra_graph)$color[i]
E(graph_new)$weight[i] = E(extra_graph)$weight[i]
}
for (i in c(425:554))
{
E(graph_new)$color[i] = E(advice_graph_extra)$color[i-424]
E(graph_new)$weight[i] = E(advice_graph_extra)$weight[i-424]
}
plot.igraph(graph_new,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black", edge.width=E(extra_graph_full)$weight,edge.color = E(extra_graph_full)$color,vertex.size = 12, edge.arrow.size=.3,edge.curved=TRUE)
trusting = adj
trusting[trusting==-3] = 0
trusting[trusting==-2] = 0
trusting[trusting==-1] = 0
trusting_extra = graph.adjacency(as.matrix(trusting), "directed", weighted = TRUE)
E(trusting_extra)$color = 'green'
# plot.igraph(trusting_extra,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(trusting_extra)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
distrust = adj
distrust[distrust == 3] = 0
distrust[distrust == 2] = 0
distrust[distrust == 1] = 0
distrust[distrust == -3] = 3
distrust[distrust == -2] = 2
distrust[distrust == -1] = 1
distrust_graph_extra = graph.adjacency(as.matrix(distrust_num), "directed", weighted = TRUE)
E(distrust_graph_extra)$color  = 'red'
# plot.igraph(distrust_graph_extra,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.width=E(distrust_graph_extra)$weight,vertex.size = 12, edge.arrow.size=.3,edge.curved=TRUE)
extra_graph = union(distrust_graph_extra, trusting_extra)
E(extra_graph)$color <- ifelse(is.na(E(extra_graph)$color_1),E(extra_graph)$color_2,E(extra_graph)$color_1)
E(extra_graph)$weight <- ifelse(is.na(E(extra_graph)$weight_1),E(extra_graph)$weight_1,E(extra_graph)$weight_2)
advice_adj_extra = adj
for (i in c(1:30))
{
for (j in c(1:30))
{
x = as.numeric(colnames(adj)[i])
y = as.numeric(rownames(adj)[j])
if (advice_adj[x,y] == 1)
{
advice_adj_extra[i,j] = 1
}
else
{
advice_adj_extra[i,j] = 0
}
}
}
advice_graph_extra = graph.adjacency(as.matrix(advice_adj_extra), "directed", weighted = TRUE)
E(advice_graph_extra)$color  = 'black'
advice_edge = as_edgelist(advice_graph_extra, names = T)
trust_edge = as_edgelist(extra_graph, names = T)
new_edge = rbind(trust_edge, advice_edge)
graph_new = graph_from_edgelist(new_edge)
for (i in c(1:424))
{
E(graph_new)$color[i] = E(extra_graph)$color[i]
E(graph_new)$weight[i] = E(extra_graph)$weight[i]
}
for (i in c(425:554))
{
E(graph_new)$color[i] = E(advice_graph_extra)$color[i-424]
E(graph_new)$weight[i] = E(advice_graph_extra)$weight[i-424]
}
plot.igraph(graph_new,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black", edge.width=E(graph_new)$weight,edge.color = E(graph_new)$color,vertex.size = 12, edge.arrow.size=.3,edge.curved=TRUE)
count = rep(0,38)
advice_edge1 = cbind(data[,1], data$V38)
for(i in c(1:30))
{
count[data$V38[i]] =  count[data$V38[i]] + 1
}
advice_edge2 = cbind(data[,1], data$V39)
for(i in c(1:30))
{
count[data$V39[i]] =  count[data$V39[i]] + 1
}
advice_edge3 = cbind(data[,1], data$V40)
for(i in c(1:30))
{
count[data$V40[i]] =  count[data$V40[i]] + 1
}
advice_edge4 = cbind(data[,1], data$V41)
for(i in c(1:30))
{
count[data$V41[i]] =  count[data$V41[i]] + 1
}
advice_edge5 = cbind(data[,1], data$V42)
for(i in c(1:30))
{
count[data$V42[i]] =  count[data$V42[i]] + 1
}
print(count)
advice_edges = rbind(advice_edge1, advice_edge2, advice_edge3, advice_edge4, advice_edge5)
advice_seeking = graph.data.frame(advice_edges, directed = TRUE)
for ( i in c(1:38))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
for ( i in c(1:38))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
V(advice_seeking)$name[38] == which.max(count)
V(advice_seeking)$name[37] == which.max(count)
V(advice_seeking)$name[30] == which.max(count)
advice_seeking
V(advice_seeking)
for ( i in c(1:35))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
count = rep(0,38)
advice_edge1 = cbind(data[,1], data$V38)
for(i in c(1:30))
{
count[data$V38[i]] =  count[data$V38[i]] + 1
}
advice_edge2 = cbind(data[,1], data$V39)
for(i in c(1:30))
{
count[data$V39[i]] =  count[data$V39[i]] + 1
}
advice_edge3 = cbind(data[,1], data$V40)
for(i in c(1:30))
{
count[data$V40[i]] =  count[data$V40[i]] + 1
}
advice_edge4 = cbind(data[,1], data$V41)
for(i in c(1:30))
{
count[data$V41[i]] =  count[data$V41[i]] + 1
}
advice_edge5 = cbind(data[,1], data$V42)
for(i in c(1:30))
{
count[data$V42[i]] =  count[data$V42[i]] + 1
}
print(count)
advice_edges = rbind(advice_edge1, advice_edge2, advice_edge3, advice_edge4, advice_edge5)
advice_seeking = graph.data.frame(advice_edges, directed = TRUE)
for ( i in c(1:35))
{
V(advice_seeking)$color[i] = 'grey'
if (V(advice_seeking)$name[i] == which.max(count))
{
V(advice_seeking)$color[i] = 'red'
}
}
plot.igraph(advice_seeking,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.label.color="black",edge.color="black",vertex.size = 12, edge.arrow.size=.3,edge.curved=FALSE)
